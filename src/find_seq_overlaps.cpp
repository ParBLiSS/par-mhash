#include "bliss-config.hpp"

#include <string>
#include <iostream>
#include <fstream>

#include "utils/logging.h"
#include "common/alphabets.hpp"
#include "common/kmer.hpp"
#include "common/base_types.hpp"
#include "utils/kmer_utils.hpp"

#include "io/file.hpp"
#include "io/kmer_parser.hpp"
#include "io/kmer_file_helper.hpp"

#include "mxx/env.hpp"
#include "mxx/comm.hpp"
#include "mxx/utils.hpp"
#include "tclap/CmdLine.h"
#include "utils/tclap_utils.hpp"

#if (pDNA == 16)
using Alphabet = bliss::common::DNA16;
#elif (pDNA == 5)
using Alphabet = bliss::common::DNA5;
#elif (pDNA == 4)
using Alphabet = bliss::common::DNA;
#endif

#if (pPARSER == FASTQ)
#define FileParser bliss::io::FASTQParser
#elif (pPARSER == FASTA)
#define FileParser bliss::io::FASTAParser
#endif

#ifndef HASH_BLOCK_SIZE
#define HASH_BLOCK_SIZE 4
#endif
// const std::size_t HASH_BLOCK_SIZE = 4;

#ifndef HASH_KMER_SIZE
#define HASH_KMER_SIZE 16
#endif

template <typename Iterator, template <typename> class SeqParser>
using SeqIterType = bliss::io::SequencesIterator<Iterator, SeqParser>;

using KmerType = bliss::common::Kmer<26, Alphabet, WordType>;
using EdgeEncoding = Alphabet;
using FileReaderType = bliss::io::parallel::partitioned_file<bliss::io::posix_file, FileParser >;

template <typename Iter>
using NonEOLIter = bliss::iterator::filter_iterator<bliss::utils::file::NotEOL, Iter>;

using HashValueType = uint64_t;

static const std::size_t hash_block_size = HASH_BLOCK_SIZE;
static const std::size_t hash_functions_size = HASH_BLOCK_SIZE;

using HashBlockType = std::array<HashValueType, hash_block_size>;

struct TestMinHashFunctionBlock {

  HashBlockType operator()(const KmerType& tx){
  constexpr static const uint64_t
     mod_bases[hash_functions_size] = {
        100000000000031,
        110000000000067,
        120000000000067,
        150000000000079,
    };
    HashBlockType hbx;
    // std::cout << tx.getData()[0] << " ";
    for(auto i = 0; i < hbx.size(); i++ ){
      hbx[i] = (tx.getData()[0]) % mod_bases[i];
      // std::cout << hrx[i] << " ";
    }
    // std::cout << std::endl;
    return hbx;
  }
};

struct ReadHashPair{
  std::size_t read_id;
  HashBlockType hash_values;

  ReadHashPair() {
    // hash_values.resize(block_size);
    for(auto i = 0; i < hash_values.size();i++)
      hash_values[i] = std::numeric_limits<HashValueType>::max() - 1;
  }

  void print(std::ostream& ofs){
      ofs << read_id << " ";
      for(auto i = 0; i < hash_values.size();i++)
          ofs << hash_values[i] << " ";
  }

  void update_min(const HashBlockType& cx){
    for(std::size_t i = 0;i < hash_values.size();i++) {
      if(cx[i] < hash_values[i]) hash_values[i] = cx[i];
    }
  }
};

struct ReadHashPairCompartor {
  bool operator()(const ReadHashPair& x,
                  const ReadHashPair& y){
    for(auto i = 0; i < x.hash_values.size();i++){
      if(x.hash_values[i] == y.hash_values[i]) continue;

      if(x.hash_values[i] < y.hash_values[i]) return true;
      else return false;
    }
    return false;
  }
};


// defining your own type for structs which are non-templated 
MXX_CUSTOM_STRUCT(ReadHashPair, read_id, hash_values);

/**
 * @tparam KmerType output value type of this parser. not necessarily the same
 *                  as the map's final storage type.
 */
template <typename MinHashFunctionBlockType, typename KmerType>
struct SeqMinHashGenerator {

  // type of element generated by this parser. since kmer itself is
  // parameterized, this is not hard coded. first (size_t) is length of the
  // read. second (bool) is true if read is valid, ie no N in the read.
  // using value_type = std::pair<std::size_t, HashBlockType>;
  using value_type = ReadHashPair;
  using kmer_type = KmerType;

  bliss::partition::range<std::size_t> valid_range;

  SeqMinHashGenerator(::bliss::partition::range<size_t> const & _valid_range)
    : valid_range(_valid_range) {};


  /**
   * @brief generate kmers from 1 sequence.  result inserted into output_iter,
   *        which may be preallocated.
   * @param read          sequence object, which has pointers to the raw byte array.
   * @param output_iter   output iterator pointing to insertion point for underlying container.
   * @return new position for output_iter
   * @tparam SeqType      type of sequence.  inferred.
   * @tparam OutputIt     output iterator type, inferred.
   */
  template <typename SeqType, typename OutputIt>
  OutputIt operator()(SeqType & read, OutputIt output_iter) {
    MinHashFunctionBlockType hash_functions;

    static_assert(std::is_same<SeqType,
                  bliss::io::FASTQSequence<typename SeqType::IteratorType> >::value,
                  "ReadLengthParser only supports FASTQ at the moment, as it does not handle partial sequence.");

    static_assert(std::is_same<value_type,
                  typename std::iterator_traits<OutputIt>::value_type>::value,
                  "output type and output container value type are not the same");

    using Alphabet = typename KmerType::KmerAlphabet;

    /// converter from ascii to alphabet values
    using BaseCharIterator = bliss::iterator::transform_iterator<
      NonEOLIter<typename SeqType::IteratorType>, bliss::common::ASCII2<Alphabet> >;

    /// kmer generation iterator
    using KmerIterType = bliss::common::KmerGenerationIterator<BaseCharIterator,
                                                               KmerType>;

    static_assert(std::is_same<typename std::iterator_traits<KmerIterType>::value_type,
                               KmerType>::value,
                  "input iterator and output iterator's value types differ");


    //== filtering iterator
    bliss::utils::file::NotEOL neol;
    NonEOLIter<typename SeqType::IteratorType> eolstart(neol, read.seq_begin, read.seq_end);
    NonEOLIter<typename SeqType::IteratorType> eolend(neol, read.seq_end);

    //== set up the kmer generating iterators
    KmerIterType start(BaseCharIterator(eolstart, bliss::common::ASCII2<Alphabet>()), true);
    KmerIterType end(BaseCharIterator(eolend, bliss::common::ASCII2<Alphabet>()), false);

    //    printf("First: pos %lu kmer %s\n", read.id.id, bliss::utils::KmerUtils::toASCIIString(*start).c_str());Q

    bliss::partition::range<size_t> seq_range(read.seq_global_offset(),
                                              read.seq_global_offset() + read.seq_size());
    ReadHashPair hrv;
    hrv.read_id = read.id.get_pos();
    if (seq_range.contains(valid_range.end)) {
      // seq_range contains overlap.
      // not checking by end iterator at valid_range.end, since the NonEOLIter
      // is a filter iterator that may skip over that pos.
      int64_t valid_dist = valid_range.end - seq_range.start;
      for (auto it = start; it != end; ++it)  {
        // check tail of window -> transform iterator, get base -> non EOL
        // iterator, get base -> seq raw char iter.
        if (std::distance(read.seq_begin,
                          it.getTrailingIterator().getBaseIterator().getBaseIterator())
            >= valid_dist) {
          break;
        }

        HashBlockType hx = hash_functions(*it);
        hrv.update_min(hx); // pick the minimum
      }
    } else {
      for (auto it = start; it != end; ++it)  {
        HashBlockType hx = hash_functions(*it);
        hrv.update_min(hx);
      }
    }
    *output_iter = hrv;
    return output_iter;
  }
};



void runFSO(mxx::comm& comm,
            std::vector<std::string>& inFiles, std::string outPrefix){
  // Read files
  std::vector<::bliss::io::file_data> file_data;
  size_t total = 0;
  for (auto fn : inFiles) {
    if (comm.rank() == 0) printf("READING %s via posix\n", fn.c_str());

    FileReaderType fobj(fn, KmerType::size + 1, comm);

    file_data.push_back(fobj.read_file());
    total += file_data.back().getRange().size();
  }
  std::vector< SeqMinHashGenerator< TestMinHashFunctionBlock, KmerType>::value_type >  local_offsets;

  bliss::io::KmerFileHelper::template
    parse_file_data<SeqMinHashGenerator<TestMinHashFunctionBlock, KmerType>, FileParser,
                    SeqIterType>(file_data.back(), local_offsets, comm);

  ReadHashPairCompartor block_compare;

  mxx::sort(local_offsets.begin(), local_offsets.end(),
            block_compare, comm);

  // std::sort(local_offsets.begin(), local_offsets.end(),
  //          block_compare);
  // for(auto x : local_offsets){
  //   x.print(std::cout);
  //   std::cout << std::endl;
  // }
}

void parse_args(int argc, char **argv,
                mxx::comm& comm,
                std::vector<std::string>& filenames,
                std::string& outPrefix){
  try { // try-catch block for commandline

    TCLAP::CmdLine cmd("Parallel de bruijn graph compaction", ' ', "0.1");

    // MPI friendly commandline output.
    bliss::utils::tclap::MPIOutput cmd_output(comm);
    cmd.setOutput(&cmd_output);

    // output file argument
    TCLAP::ValueArg<std::string> outputArg("O", "output_prefix",
                                           "Prefix for output files, including directory",
                                           false, "", "string", cmd);

    // input files
    TCLAP::UnlabeledMultiArg<std::string> fileArg("filenames", "FASTA or FASTQ file names",
                                                  true, "string", cmd);


    // Parse the argv array.
    cmd.parse( argc, argv );

    outPrefix = outputArg.getValue();
    filenames = fileArg.getValue();

  } catch (TCLAP::ArgException &e)  {
    std::cerr << "error: " << e.error() << " for arg " << e.argId() << std::endl;
    exit(-1);
  }
}

int main(int argc, char** argv) {

  LOG_INIT(); // init logging

  mxx::env e(argc, argv); // MPI init
  mxx::comm comm;

  if (comm.rank() == 0)
    std::cout << "EXECUTING " << std::string(argv[0]) << std::endl;


  std::vector<std::string> filenames;
  std::string outPrefix;
  outPrefix.assign("./output");

  // parse arguments
  parse_args(argc, argv, comm, filenames, outPrefix);
  if(comm.rank() == 0 && filenames.size() > 0){
    for(auto fx : filenames) std::cout << fx << std::endl;
  }

  // runFSO
  comm.barrier();
  auto start = std::chrono::steady_clock::now();

  if(!comm.rank())
      std::cout << "Beginning computation, timer started" << std::endl;

  runFSO(comm, filenames, outPrefix);

  comm.barrier();
  auto end = std::chrono::steady_clock::now();
  auto elapsed_time  = std::chrono::duration<double, std::milli>(end - start).count();

  if(!comm.rank())
      std::cout << "Time (ms) -> " << elapsed_time << std::endl;

 // TODO: compute elapsed time
}
