#include "bliss-config.hpp"

#include <string>
#include <iostream>
#include <fstream>

#include "utils/logging.h"
#include "common/alphabets.hpp"
#include "common/kmer.hpp"
#include "common/base_types.hpp"
#include "utils/kmer_utils.hpp"

#include "io/file.hpp"
#include "io/kmer_parser.hpp"
#include "io/kmer_file_helper.hpp"

#include "mxx/env.hpp"
#include "mxx/comm.hpp"
#include "mxx/utils.hpp"
#include "tclap/CmdLine.h"
#include "utils/tclap_utils.hpp"

#if (pDNA == 16)
using Alphabet = bliss::common::DNA16;
#elif (pDNA == 5)
using Alphabet = bliss::common::DNA5;
#elif (pDNA == 4)
using Alphabet = bliss::common::DNA;
#endif

#if (pPARSER == FASTQ)
#define FileParser bliss::io::FASTQParser
#elif (pPARSER == FASTA)
#define FileParser bliss::io::FASTAParser
#endif

#ifndef HASH_BLOCK_SIZE
#define HASH_BLOCK_SIZE 4
#endif
// const std::size_t HASH_BLOCK_SIZE = 4;

#ifndef HASH_KMER_SIZE
#define HASH_KMER_SIZE 27
#endif

template <typename Iterator, template <typename> class SeqParser>
using SeqIterType = bliss::io::SequencesIterator<Iterator, SeqParser>;

using KmerType = bliss::common::Kmer<HASH_KMER_SIZE, Alphabet, WordType>;
using EdgeEncoding = Alphabet;
using FileReaderType = bliss::io::parallel::partitioned_file<bliss::io::posix_file, FileParser >;

template <typename Iter>
using NonEOLIter = bliss::iterator::filter_iterator<bliss::utils::file::NotEOL, Iter>;

using HashValueType = uint64_t;

static const std::size_t hash_block_size = HASH_BLOCK_SIZE;
static const std::size_t hash_functions_size = HASH_BLOCK_SIZE;

using HashBlockType = std::array<HashValueType, hash_block_size>;
//#include <smhasher/MurmurHash3.cpp>
/**
 * @brief Kmer specialization for MurmurHash.  generated hash is 128 bit.
 */
template <typename KMER, bool Prefix = false>
class murmur {

protected:
    static constexpr unsigned int nBytes = (KMER::nBits + 7) / 8;

public:
    inline uint64_t operator()(const KMER & kmer, uint32_t seed_value = 42) const {
            // produces 128 bit hash.
            uint64_t h[2];
            // let compiler optimize out all except one of these.
            if (sizeof(void*) == 8)
                MurmurHash3_x64_128(kmer.getData(), nBytes, seed_value, h);
            else if (sizeof(void*) == 4)
                MurmurHash3_x86_128(kmer.getData(), nBytes, seed_value, h);
            else
                throw ::std::logic_error("ERROR: neither 32 bit nor 64 bit system");

            // use the upper 64 bits.
            if (Prefix)
                return h[1];
            else
                return h[0];
        }
};

template<typename KMER, std::size_t seed_begin = 0>
struct MinHashFunctionBlock {

  HashBlockType operator()(const KMER& tx){
      constexpr static const uint32_t
        seed_values[hash_functions_size] = {
          1000000007,
          1000002043,
          1000003097,
          1000000079,
      };

      constexpr static const murmur<KMER> mmur_obj;

      HashBlockType hbx;
      // std::cout << tx.getData()[0] << " ";
      auto sdx = seed_begin;
      for(auto i = 0; (i < hbx.size()) && (sdx < hash_functions_size);
          i++, sdx++){
          // hbx[i] = (tx.getData()[0]) % mod_bases[i];
          // std::cout << hrx[i] << " ";
          hbx[i] = mmur_obj(tx, seed_values[sdx]);
      }
      // std::cout << std::endl;
      return hbx;
  }
};

struct ReadHashBlock{
  std::size_t read_id;
  HashBlockType hash_values;

    void reset(){
        for(auto i = 0; i < hash_values.size();i++)
            hash_values[i] = std::numeric_limits<HashValueType>::max() - 1;
    }

    ReadHashBlock() {
        reset();
    }

    void print(std::ostream& ofs){
        ofs << read_id << " ";
        for(auto i = 0; i < hash_values.size();i++)
            ofs << hash_values[i] << " ";
    }

    void update_min(const HashBlockType& cx){
        for(auto i = 0;i < hash_values.size();i++) {
            if(cx[i] < hash_values[i]) hash_values[i] = cx[i];
        }
    }
};

struct ReadHashBlockComparator {
  bool operator()(const ReadHashBlock& x,
                  const ReadHashBlock& y){
    for(auto i = 0; i < x.hash_values.size();i++){
      if(x.hash_values[i] == y.hash_values[i]) continue;

      if(x.hash_values[i] < y.hash_values[i]) return true;
      else return false;
    }
    return false;
  }
};


// defining your own type for structs which are non-templated 
MXX_CUSTOM_STRUCT(ReadHashBlock, read_id, hash_values);

/**
 * @tparam KmerType output value type of this parser. not necessarily the same
 *                  as the map's final storage type.
 */
template <typename MinHashFunctionBlockType, typename KmerType>
struct SeqMinHashGenerator {

  // type of element generated by this parser. since kmer itself is
  // parameterized, this is not hard coded. first (size_t) is length of the
  // read. second (bool) is true if read is valid, ie no N in the read.
  // using value_type = std::pair<std::size_t, HashBlockType>;
  using value_type = ReadHashBlock;
  using kmer_type = KmerType;
  static constexpr size_t window_size = kmer_type::size;

  bliss::partition::range<std::size_t> valid_range;

  SeqMinHashGenerator(::bliss::partition::range<size_t> const & _valid_range)
    : valid_range(_valid_range) {};


  /**
   * @brief generate kmers from 1 sequence.  result inserted into output_iter,
   *        which may be preallocated.
   * @param read          sequence object, which has pointers to the raw byte array.
   * @param output_iter   output iterator pointing to insertion point for underlying container.
   * @return new position for output_iter
   * @tparam SeqType      type of sequence.  inferred.
   * @tparam OutputIt     output iterator type, inferred.
   */
  template <typename SeqType, typename OutputIt>
  OutputIt operator()(SeqType & read, OutputIt output_iter) {
    MinHashFunctionBlockType hash_functions;

    static_assert(std::is_same< SeqType,
                  bliss::io::FASTQSequence<typename SeqType::IteratorType> >::value,
                  "ReadLengthParser only supports FASTQ at the moment.");

    static_assert(std::is_same<value_type,
                  typename std::iterator_traits<OutputIt>::value_type>::value,
                  "output type and output container value type are not the same");

    using Alphabet = typename KmerType::KmerAlphabet;

    /// converter from ascii to alphabet values
    using BaseCharIterator =
        bliss::iterator::transform_iterator< NonEOLIter<typename SeqType::IteratorType>,
                                             bliss::common::ASCII2<Alphabet> >;

    /// kmer generation iterator
    using KmerIterType =
        bliss::common::KmerGenerationIterator<BaseCharIterator,
                                              KmerType>;

    static_assert(std::is_same<typename std::iterator_traits<KmerIterType>::value_type,
                               KmerType>::value,
                  "input iterator and output iterator's value types differ");


    //== filtering iterator
    bliss::utils::file::NotEOL neol;
    NonEOLIter<typename SeqType::IteratorType> eolstart(neol, read.seq_begin,
                                                        read.seq_end);
    NonEOLIter<typename SeqType::IteratorType> eolend(neol, read.seq_end);

    //== set up the kmer generating iterators
    KmerIterType start(BaseCharIterator(eolstart, bliss::common::ASCII2<Alphabet>()),
                       true);
    KmerIterType end(BaseCharIterator(eolend, bliss::common::ASCII2<Alphabet>()),
                     false);

    // printf("First: pos %lu kmer %s\n", read.id.id,
    //       bliss::utils::KmerUtils::toASCIIString(*start).c_str());

    bliss::partition::range<size_t> seq_range(
        read.seq_global_offset(), read.seq_global_offset() + read.seq_size());
    ReadHashBlock hrv;
    hrv.read_id = read.id.get_pos();
    if (seq_range.contains(valid_range.end)) {
      // seq_range contains overlap.
      // not checking by end iterator at valid_range.end, since the NonEOLIter
      // is a filter iterator that may skip over that pos.
      int64_t valid_dist = valid_range.end - seq_range.start;
      for (auto it = start; it != end; ++it)  {
        // check tail of window -> transform iterator, get base -> non EOL
        // iterator, get base -> seq raw char iter.
        if (std::distance(read.seq_begin,
                          it.getTrailingIterator().getBaseIterator().getBaseIterator())
            >= valid_dist) {
          break;
        }

        HashBlockType hx = hash_functions(*it);
        hrv.update_min(hx); // pick the minimum
      }
    } else {
      for (auto it = start; it != end; ++it)  {
        HashBlockType hx = hash_functions(*it);
        hrv.update_min(hx);
      }
    }
    *output_iter = hrv;
    return output_iter;
  }
};

using SeqMinHashGeneratorType =
    SeqMinHashGenerator< MinHashFunctionBlock<KmerType>, KmerType>;
using BlockValueType = SeqMinHashGeneratorType::value_type ;

void shiftStraddlingRegion(const mxx::comm& comm,
                           std::vector<BlockValueType>&  local_rhpairs,
                           std::size_t& start_offset,
                           std::size_t& end_offset,
                           std::vector<BlockValueType>& straddle_region){
    std::vector<BlockValueType> to_left, region_right, region_left;
    // find the starting segment of local_rhpairs that straddles
    //  with the processor on the left
    auto lastv = local_rhpairs.back();
    auto prevx = mxx::right_shift(lastv, comm);

    auto fwx_itr = local_rhpairs.begin();
    if(comm.rank() > 0){
        for(;fwx_itr != local_rhpairs.end(); fwx_itr++){
            if((*fwx_itr).hash_values != prevx.hash_values)
                break;
        }
    }

    if(fwx_itr != local_rhpairs.begin()){
        auto osize = std::distance(local_rhpairs.begin(), fwx_itr);
        to_left.resize(osize);
        std::copy(local_rhpairs.begin(), fwx_itr, to_left.begin());
    }
    region_right = mxx::left_shift(to_left, comm); // TODO: make sub-communicator
    start_offset = std::distance(local_rhpairs.begin(), fwx_itr);

    // find the ending segment of local_rhpairs that straddles
    //  with the processor on the right
    auto rvx_itr = local_rhpairs.rbegin();
    if(comm.rank() < comm.size() - 1) {
        for(;rvx_itr != local_rhpairs.rend();rvx_itr++){
            if((*rvx_itr).hash_values != lastv.hash_values)
                break;
        }
    }
    auto rsize = std::distance(local_rhpairs.rbegin(), rvx_itr);
    if(rsize < local_rhpairs.size()) // TODO: check this
        end_offset = local_rhpairs.size() - rsize + 1;

    // TODO: validate/check this again
    straddle_region.resize(local_rhpairs.size()  - end_offset + region_right.size());
    std::copy(local_rhpairs.begin() + end_offset, local_rhpairs.end(),
              straddle_region.begin());
    std::copy(region_right.begin(), region_right.end(),
              straddle_region.begin() + rsize);

}

void generatePairs(const mxx::comm& comm,
                   std::vector<BlockValueType>::iterator start_itr,
                   std::vector<BlockValueType>::iterator end_itr){
    for(auto outer_itr = start_itr; outer_itr != end_itr; outer_itr++){
        for(auto inner_itr = outer_itr; inner_itr != end_itr; inner_itr++){
            // TODO: generate pair
        }
    }
}

uint64_t generateOverlapReadPairs(const mxx::comm& comm,
                                  std::vector<BlockValueType>&  local_rhpairs){
    uint64_t nuniqb = 0;
    auto lastv = local_rhpairs.back();
    auto prevx = mxx::right_shift(lastv, comm);
    for(auto curx : local_rhpairs){
        if(prevx.hash_values != curx.hash_values)
            nuniqb += 1;
        prevx = curx;
    }

    std::size_t start_offset, end_offset;
    std::vector<BlockValueType> straddle_region;
    //
    shiftStraddlingRegion(comm, local_rhpairs, start_offset, end_offset,
                          straddle_region);

    //
    generatePairs(comm, straddle_region.begin(), straddle_region.end());
    generatePairs(comm, local_rhpairs.begin() + start_offset,
                  local_rhpairs.end() + end_offset);
    return nuniqb;
}


void runFSO(mxx::comm& comm,
            std::vector<std::string>& inFiles, std::string outPrefix){
  // Read files
  BL_BENCH_INIT(rfso);
  std::vector<::bliss::io::file_data> file_data;
  size_t total = 0;

  BL_BENCH_START(rfso);
  for (auto fn : inFiles) {
    if (comm.rank() == 0) printf("READING %s via posix\n", fn.c_str());

    FileReaderType fobj(fn, KmerType::size + 1, comm);

    file_data.push_back(fobj.read_file());
    total += file_data.back().getRange().size();
  }
  BL_BENCH_COLLECTIVE_END(rfso, "read_files", total, comm);

  BL_BENCH_START(rfso);
  std::vector< SeqMinHashGeneratorType::value_type >  local_rhpairs;

  bliss::io::KmerFileHelper::template
      parse_file_data<SeqMinHashGeneratorType, FileParser,
                      SeqIterType>(file_data.back(), local_rhpairs, comm);

  BL_BENCH_COLLECTIVE_END(rfso, "compute_hash", local_rhpairs.size(), comm);

  BL_BENCH_START(rfso);
  ReadHashBlockComparator block_compare;

  mxx::sort(local_rhpairs.begin(), local_rhpairs.end(),
            block_compare, comm);
  BL_BENCH_COLLECTIVE_END(rfso, "sort_records", local_rhpairs.size(), comm);

  // std::sort(local_rhpairs.begin(), local_rhpairs.end(),
  //          block_compare);
  // for(auto x : local_rhpairs){
  //   x.print(std::cout);
  //   std::cout << std::endl;
  // }

  BL_BENCH_START(rfso);
  uint64_t nuniqb = 0;
  comm.with_subset(
      local_rhpairs.begin() != local_rhpairs.end(), [&](const mxx::comm& comm){
          nuniqb = generateOverlapReadPairs(comm, local_rhpairs);
      });
  BL_BENCH_COLLECTIVE_END(rfso, "pair_gen", nuniqb, comm);
  BL_BENCH_REPORT_MPI_NAMED(rfso, "app", comm);
}

void parse_args(int argc, char **argv,
                mxx::comm& comm,
                std::vector<std::string>& filenames,
                std::string& outPrefix){
  try { // try-catch block for commandline

    TCLAP::CmdLine cmd("Parallel de bruijn graph compaction", ' ', "0.1");

    // MPI friendly commandline output.
    bliss::utils::tclap::MPIOutput cmd_output(comm);
    cmd.setOutput(&cmd_output);

    // output file argument
    TCLAP::ValueArg<std::string> outputArg("O", "output_prefix",
                                           "Prefix for output files, including directory",
                                           false, "", "string", cmd);

    // input files
    TCLAP::UnlabeledMultiArg<std::string> fileArg("filenames", "FASTA or FASTQ file names",
                                                  true, "string", cmd);


    // Parse the argv array.
    cmd.parse( argc, argv );

    outPrefix = outputArg.getValue();
    filenames = fileArg.getValue();

  } catch (TCLAP::ArgException &e)  {
    std::cerr << "error: " << e.error() << " for arg " << e.argId() << std::endl;
    exit(-1);
  }
}

int main(int argc, char** argv) {

  LOG_INIT(); // init logging

  mxx::env e(argc, argv); // MPI init
  mxx::comm comm;

  if (comm.rank() == 0)
    std::cout << "EXECUTING " << std::string(argv[0]) << std::endl;


  std::vector<std::string> filenames;
  std::string outPrefix;
  outPrefix.assign("./output");

  // parse arguments
  parse_args(argc, argv, comm, filenames, outPrefix);
  if(comm.rank() == 0 && filenames.size() > 0){
    for(auto fx : filenames) std::cout << fx << std::endl;
  }

  // runFSO
  comm.barrier();
  // auto start = std::chrono::steady_clock::now();

  // if(!comm.rank())
  //    std::cout << "Beginning computation, timer started" << std::endl;

  runFSO(comm, filenames, outPrefix);


  comm.barrier();
  // auto end = std::chrono::steady_clock::now();
  // auto elapsed_time  = std::chrono::duration<double, std::milli>(end - start).count();

  // if(!comm.rank())
  //    std::cout << "Time (ms) -> " << elapsed_time << std::endl;

 // TODO: compute elapsed time
}
